// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.4;

library ZombieFactory {
    struct Zombie {
        string name;
        uint256 dna;
        uint32 level;
        uint32 readyTime;
        uint16 winCount;
        uint16 lossCount;
    }
}

interface ZombieAttack {
    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);
    error ERC721InsufficientApproval(address operator, uint256 tokenId);
    error ERC721InvalidApprover(address approver);
    error ERC721InvalidOperator(address operator);
    error ERC721InvalidOwner(address owner);
    error ERC721InvalidReceiver(address receiver);
    error ERC721InvalidSender(address sender);
    error ERC721NonexistentToken(uint256 tokenId);
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error ZombieFactory__AlreadyHaveZombie();

    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);
    event MetadataUpdate(uint256 _tokenId);
    event NewZombie(uint256 zombieId, string name, uint256 dna);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    function approve(address to, uint256 tokenId) external;
    function attack(uint256 _zombieId, uint256 _targetId) external;
    function balanceOf(address owner) external view returns (uint256);
    function changeDna(uint256 _zombieId, uint256 _newDna) external;
    function changeName(uint256 _zombieId, string memory _newName) external;
    function createRandomZombie(string memory _name) external;
    function feedOnKitty(uint256 _zombieId, uint256 _kittyId) external;
    function getAllZombies() external view returns (ZombieFactory.Zombie[] memory);
    function getApproved(uint256 tokenId) external view returns (address);
    function getKittyContractAddress() external view returns (address);
    function getZombiesByOwner(address _owner) external view returns (uint256[] memory);
    function isApprovedForAll(address owner, address operator) external view returns (bool);
    function levelUp(uint256 _zombieId) external payable;
    function name() external view returns (string memory);
    function owner() external view returns (address);
    function ownerOf(uint256 tokenId) external view returns (address);
    function renounceOwnership() external;
    function s_zombies(uint256)
        external
        view
        returns (string memory name, uint256 dna, uint32 level, uint32 readyTime, uint16 winCount, uint16 lossCount);
    function safeTransferFrom(address from, address to, uint256 tokenId) external;
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) external;
    function setApprovalForAll(address operator, bool approved) external;
    function setKittyContractAddress(address _address) external;
    function setLevelUpFee(uint256 _fee) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function symbol() external view returns (string memory);
    function tokenURI(uint256 tokenId) external view returns (string memory);
    function transferFrom(address from, address to, uint256 tokenId) external;
    function transferOwnership(address newOwner) external;
    function withdraw() external;
}
